esphome:
  name: talkie
  friendly_name: Talkie

esp32:
  board: featheresp32
  framework:
    type: esp-idf
    #type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret talkie-api-encryption-key

ota:
  password: !secret talkie_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret talkie-hotspot-ssid
    password: !secret talkie-hotspot-password

captive_portal:
    
i2s_audio:
  - id: i2s_out
    i2s_lrclk_pin: 13
    i2s_bclk_pin: 33
  - id: i2s_in
    i2s_lrclk_pin: 32
    i2s_bclk_pin: 22

speaker:
  - platform: i2s_audio
    id: external_speaker
    dac_type: external
    i2s_audio_id: i2s_out
    i2s_dout_pin: 27
    mode: mono

microphone:
  - platform: i2s_audio
    id: external_microphone
    adc_type: external
    i2s_audio_id: i2s_in
    i2s_din_pin: 14
    pdm: false

sensor:
  - platform: adc
    pin: A13
    id: battery_voltage
    name: "Battery Voltage"
    update_interval: 60s
    disabled_by_default: true
    entity_category: diagnostic
    attenuation: auto
    filters:
      - multiply: 2.0

  - platform: template
    name: Battery
    update_interval: 60s
    device_class: "battery"
    state_class: "measurement"
    unit_of_measurement: "%"
    accuracy_decimals: 2
    lambda: return 123-123/pow(1+pow(id(battery_voltage).state/3.7,80),0.165);
  
binary_sensor:
  - platform: gpio
    pin:
      number: 21
      mode:
        input: true
        pullup: true
    name: Push to talk Button
    disabled_by_default: true
    entity_category: diagnostic
    on_press:
      - if:
          condition:
            switch.is_off: use_wake_word
          then:
            - voice_assistant.start:
                silence_detection: false
#          else:
#            - voice_assistant.stop:
#            - lambda: id(va).set_use_wake_word(false);
#            - wait_until:
#                not:
#                  voice_assistant.is_running:       
#            - voice_assistant.start:
#                silence_detection: false
    on_release:
      - if:
          condition:
            switch.is_off: use_wake_word
          then:
            - voice_assistant.stop:
#          else:
#            - voice_assistant.stop:
#            - delay: 100ms
#            - wait_until:
#                not:
#                  speaker.is_playing:
#                      id: external_speaker
#            - lambda: id(va).set_use_wake_word(true);
#            - voice_assistant.start_continuous:
#            - script.execute: reset_led


  - platform: gpio
    name: Mode Switch
    pin:
      number: 17
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      then:
        - light.turn_on:
            id: led
            blue: 100%
            red: 100%
            green: 0%
            brightness: 50%    
    on_release:
      then:
        - switch.toggle: use_wake_word 
        - delay: 1s
        - script.execute: reset_led
  
esp_adf:

voice_assistant:
  id: va
  microphone: external_microphone
  speaker: external_speaker
  noise_suppression_level: 4
  auto_gain: 31dBFS
  volume_multiplier: 8.0
  vad_threshold: 3
  use_wake_word: true
  on_listening:
      - light.turn_on:
          id: led
          blue: 100%
          red: 0%
          green: 0%
          brightness: 50%
  on_tts_start:
    - light.turn_on:
        id: led
        blue: 0%
        red: 0%
        green: 100%
        brightness: 50%
        transition_length: 250ms
  on_end:
    - delay: 100ms
    - wait_until:
        not:
          speaker.is_playing:
              id: external_speaker
    - script.execute: reset_led
  on_error:
    - script.execute: reset_led
  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:
          - script.execute: reset_led
  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop:
          - light.turn_off: led  

light:
  - platform: esp32_rmt_led_strip
    id: led
    name: Voice Assistant Led
    disabled_by_default: true
    entity_category: config
    pin: 16
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0

switch:
  - platform: template
    name: Use Wake Word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
      - script.execute: reset_led
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_led

script:
  - id: reset_led
    then:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - light.turn_on:
                id: led
                blue: 100%
                red: 100%
                green: 0%
                brightness: 20%
                transition_length: 250ms
          else:
            - light.turn_off:
                id: led
                transition_length: 250ms

external_components:
  - source: github://pr#5230
    components:
      - esp_adf
    refresh: 0s   
